_RECV_FLG BIT 00h
_SEND_FLG BIT 01h
;_RECV_BUF DATA 030h
_RECV_BUF EQU 030h
_RECV_BUF_INDEKS DATA 030h
DS 8
_SEND_BUF EQU 038h
_SEND_BUF_INDEKS DATA 038h
DS 8
	ORG 0000h
_RESET:
LJMP _INIT

	ORG 0023h
_INT_SERIAL:
	JB TI, _INT_SERIAL_TI

_INT_SERIAL_RI:
	MOV A, #_RECV_BUF
	INC _RECV_BUF_INDEKS
	ADD A, _RECV_BUF_INDEKS
	MOV R1, A
	MOV A, SBUF
	MOV SBUF, A ;natychmiast odeœlij odebrany znak do informacji nadawcy
	MOV @R1, A
	CLR RI
	SETB _RECV_FLG
	RETI

_INT_SERIAL_TI:
	CLR TI
	SETB _SEND_FLG
	RETI

	ORG 0100h
_INIT:
	SETB ES
	SETB EA

	MOV SCON, #01010000b ;M0=0, M1=1, M2=0, REN=1, TB8=0, RB8=0, TI=0, RI=0
	ANL TMOD, #00101111b ;GATE1=0, CT1=0, T1M1=?, T1M0=0, GATE0=?, CT0=?, T0M1=?, T0M0=?
	ORL TMOD, #00100000b ;GATE1=?, CT1=?, T1M1=1, T1M0=?, GATE0=?, CT0=?, T0M1=?, T0M0=?
	MOV TL1,#0FDh
	MOV TH1,#0FDh
	ANL PCON,#01111111b
	CLR TF1
	SETB TR1

	MOV _SEND_BUF_INDEKS, #0d
	
	CLR _RECV_FLG
	CLR _SEND_FLG
	MOV _RECV_BUF, #0d
	MOV _RECV_BUF_INDEKS, #0d


_LOOP:
	JNB _RECV_FLG, _LOOP10
	MOV A, _RECV_BUF_INDEKS
	CLR CY
	SUBB A, #8d
	JC _LOOP5
	LCALL _CALCULATE

_LOOP5:
	CLR _RECV_FLG

_LOOP10:
	JNB _SEND_FLG, _LOOP ; Dopóki poprzednia transmisja nie zakoñczy siê, nie wysy³aj kolejnych bajtów
	CLR _SEND_FLG
	MOV A,R7 ; Skopiuj wartoœæ indeksu do A
	INC R7
	MOV DPTR,#_MESSAGE ; Ustaw wskaŸnik DPTR na adres pocz¹tkowy ³añcucha
	MOVC A,@A+DPTR
	JZ _LOOP
	MOV SBUF,A
	LJMP _LOOP

_CALCULATE:
	CPL P1.7
	;MOV _RECV_BUF_INDEKS, #0d
	
	MOV A, #_RECV_BUF
	ADD A, #3d
        MOV R1, A
	MOV A, @R1
	SUBB A, #48d
        MOV R6, A
        MOV A, #_RECV_BUF
	ADD A, #7d
	MOV R1, A
	MOV A, @R1
	SUBB A, #48d
	ADD A, R6
	ADD A, #48d
	MOV SBUF, A
	MOV _RECV_BUF_INDEKS, #0d

	RET


	
_MESSAGE:
DB 87d,73d,84d,65d,74d, 013d, 010d, 0d
END